#!/bin/bash
# docker-build.sh - Build and run Azure Functions in Docker

set -e

# Configuration
IMAGE_NAME="confluence-qa-functions"
CONTAINER_NAME="confluence-qa-dev"
REGISTRY="${DOCKER_REGISTRY:-localhost:5000}"
VERSION="${VERSION:-latest}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${GREEN}üê≥ Azure Functions Docker Build Script${NC}"

# Function to build Docker image
build_image() {
    echo -e "${YELLOW}Building Docker image...${NC}"
    docker build -t ${IMAGE_NAME}:${VERSION} .
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Image built successfully: ${IMAGE_NAME}:${VERSION}${NC}"
    else
        echo -e "${RED}‚ùå Failed to build image${NC}"
        exit 1
    fi
}

# Function to run locally
run_local() {
    echo -e "${YELLOW}Starting local development environment...${NC}"
    
    # Check if .env file exists
    if [ ! -f .env ]; then
        echo -e "${RED}‚ùå .env file not found. Copy .env.example to .env and configure it.${NC}"
        exit 1
    fi
    
    # Start with docker-compose
    docker-compose up -d
    
    echo -e "${GREEN}‚úÖ Azure Functions running at http://localhost:7071${NC}"
    echo -e "${GREEN}   Azurite (Storage) at http://localhost:10000${NC}"
}

# Function to stop containers
stop_containers() {
    echo -e "${YELLOW}Stopping containers...${NC}"
    docker-compose down
    echo -e "${GREEN}‚úÖ Containers stopped${NC}"
}

# Function to push to registry
push_image() {
    echo -e "${YELLOW}Pushing image to registry...${NC}"
    
    # Tag for registry
    docker tag ${IMAGE_NAME}:${VERSION} ${REGISTRY}/${IMAGE_NAME}:${VERSION}
    
    # Push to registry
    docker push ${REGISTRY}/${IMAGE_NAME}:${VERSION}
    
    echo -e "${GREEN}‚úÖ Image pushed to ${REGISTRY}/${IMAGE_NAME}:${VERSION}${NC}"
}

# Function to run production build
build_production() {
    echo -e "${YELLOW}Building production image...${NC}"
    
    # Build with production optimizations
    docker build \
        --target production \
        --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
        --build-arg VERSION=${VERSION} \
        -t ${IMAGE_NAME}:${VERSION} \
        -f Dockerfile.production .
    
    echo -e "${GREEN}‚úÖ Production image built${NC}"
}

# Main menu
case "$1" in
    build)
        build_image
        ;;
    run)
        run_local
        ;;
    stop)
        stop_containers
        ;;
    push)
        push_image
        ;;
    prod)
        build_production
        ;;
    logs)
        docker-compose logs -f functions
        ;;
    shell)
        docker exec -it ${CONTAINER_NAME} /bin/bash
        ;;
    clean)
        echo -e "${YELLOW}Cleaning up...${NC}"
        docker-compose down -v
        docker system prune -f
        echo -e "${GREEN}‚úÖ Cleanup complete${NC}"
        ;;
    *)
        echo "Usage: $0 {build|run|stop|push|prod|logs|shell|clean}"
        echo ""
        echo "Commands:"
        echo "  build  - Build Docker image"
        echo "  run    - Run locally with docker-compose"
        echo "  stop   - Stop all containers"
        echo "  push   - Push image to registry"
        echo "  prod   - Build production image"
        echo "  logs   - View container logs"
        echo "  shell  - Open shell in container"
        echo "  clean  - Clean up containers and volumes"
        exit 1
        ;;
esac

# docker-run-local.ps1 - PowerShell version for Windows
# PowerShell script for Windows users
<#
.SYNOPSIS
    Build and run Azure Functions in Docker for Windows

.PARAMETER Command
    The command to execute: build, run, stop, push, prod, logs, shell, clean
#>

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("build", "run", "stop", "push", "prod", "logs", "shell", "clean")]
    [string]$Command
)

$ImageName = "confluence-qa-functions"
$ContainerName = "confluence-qa-dev"
$Registry = if ($env:DOCKER_REGISTRY) { $env:DOCKER_REGISTRY } else { "localhost:5000" }
$Version = if ($env:VERSION) { $env:VERSION } else { "latest" }

function Write-Success($message) {
    Write-Host "‚úÖ $message" -ForegroundColor Green
}

function Write-Info($message) {
    Write-Host "üìù $message" -ForegroundColor Yellow
}

function Write-Error($message) {
    Write-Host "‚ùå $message" -ForegroundColor Red
}

switch ($Command) {
    "build" {
        Write-Info "Building Docker image..."
        docker build -t ${ImageName}:${Version} .
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Image built successfully: ${ImageName}:${Version}"
        } else {
            Write-Error "Failed to build image"
            exit 1
        }
    }
    "run" {
        Write-Info "Starting local development environment..."
        if (-not (Test-Path .env)) {
            Write-Error ".env file not found. Copy .env.example to .env and configure it."
            exit 1
        }
        docker-compose up -d
        Write-Success "Azure Functions running at http://localhost:7071"
        Write-Success "Azurite (Storage) at http://localhost:10000"
    }
    "stop" {
        Write-Info "Stopping containers..."
        docker-compose down
        Write-Success "Containers stopped"
    }
    "push" {
        Write-Info "Pushing image to registry..."
        docker tag ${ImageName}:${Version} ${Registry}/${ImageName}:${Version}
        docker push ${Registry}/${ImageName}:${Version}
        Write-Success "Image pushed to ${Registry}/${ImageName}:${Version}"
    }
    "logs" {
        docker-compose logs -f functions
    }
    "shell" {
        docker exec -it $ContainerName /bin/bash
    }
    "clean" {
        Write-Info "Cleaning up..."
        docker-compose down -v
        docker system prune -f
        Write-Success "Cleanup complete"
    }
}